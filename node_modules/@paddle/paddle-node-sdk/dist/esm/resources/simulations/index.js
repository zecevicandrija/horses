var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Simulation, SimulationCollection } from '../../entities/index.js';
import { BaseResource, PathParameters, QueryParameters } from '../../internal/base/index.js';
export * from './operations/index.js';
const SimulationPaths = {
    list: '/simulations',
    create: '/simulations',
    get: '/simulations/{simulation_id}',
    update: '/simulations/{simulation_id}',
};
export class SimulationsResource extends BaseResource {
    list(queryParams) {
        const queryParameters = new QueryParameters(queryParams);
        return new SimulationCollection(this.client, SimulationPaths.list + queryParameters.toQueryString());
    }
    create(createSimulationParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.post(SimulationPaths.create, createSimulationParameters);
            const data = this.handleResponse(response);
            return new Simulation(data);
        });
    }
    get(simulationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const urlWithPathParams = new PathParameters(SimulationPaths.get, {
                simulation_id: simulationId,
            }).deriveUrl();
            const response = yield this.client.get(urlWithPathParams);
            const data = this.handleResponse(response);
            return new Simulation(data);
        });
    }
    update(simulationId, updateSimulation) {
        return __awaiter(this, void 0, void 0, function* () {
            const urlWithPathParams = new PathParameters(SimulationPaths.update, {
                simulation_id: simulationId,
            }).deriveUrl();
            const response = yield this.client.patch(urlWithPathParams, updateSimulation);
            const data = this.handleResponse(response);
            return new Simulation(data);
        });
    }
}
