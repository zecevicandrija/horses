var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { PaymentMethod, PaymentMethodCollection } from '../../entities/index.js';
import { BaseResource, PathParameters, QueryParameters } from '../../internal/base/index.js';
export * from './operations/index.js';
const PaymentMethodPaths = {
    list: '/customers/{customer_id}/payment-methods',
    get: '/customers/{customer_id}/payment-methods/{payment_method_id}',
    delete: '/customers/{customer_id}/payment-methods/{payment_method_id}',
};
export class PaymentMethodsResource extends BaseResource {
    list(customerId, queryParams) {
        const queryParameters = new QueryParameters(queryParams);
        const urlWithPathParams = new PathParameters(PaymentMethodPaths.list, {
            customer_id: customerId,
        }).deriveUrl();
        return new PaymentMethodCollection(this.client, urlWithPathParams + queryParameters.toQueryString());
    }
    get(customerId, paymentMethodId) {
        return __awaiter(this, void 0, void 0, function* () {
            const urlWithPathParams = new PathParameters(PaymentMethodPaths.get, {
                customer_id: customerId,
                payment_method_id: paymentMethodId,
            }).deriveUrl();
            const response = yield this.client.get(urlWithPathParams);
            const data = this.handleResponse(response);
            return new PaymentMethod(data);
        });
    }
    delete(customerId, paymentMethodId) {
        return __awaiter(this, void 0, void 0, function* () {
            const urlWithPathParams = new PathParameters(PaymentMethodPaths.delete, {
                customer_id: customerId,
                payment_method_id: paymentMethodId,
            }).deriveUrl();
            const response = yield this.client.delete(urlWithPathParams);
            if (response) {
                this.handleResponse(response);
            }
        });
    }
}
