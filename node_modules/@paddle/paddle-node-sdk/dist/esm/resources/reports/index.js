var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BaseResource, PathParameters, QueryParameters } from '../../internal/base/index.js';
import { Report, ReportCollection, ReportCsv } from '../../entities/index.js';
const ReportPaths = {
    list: '/reports',
    create: '/reports',
    get: '/reports/{report_id}',
    getReportCsv: '/reports/{report_id}/download-url',
};
export * from './operations/index.js';
export class ReportsResource extends BaseResource {
    list(queryParams) {
        const queryParameters = new QueryParameters(queryParams);
        return new ReportCollection(this.client, ReportPaths.list + queryParameters.toQueryString());
    }
    create(createReportParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.post(ReportPaths.create, createReportParameters);
            const data = this.handleResponse(response);
            return new Report(data);
        });
    }
    get(reportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const urlWithPathParams = new PathParameters(ReportPaths.get, {
                report_id: reportId,
            }).deriveUrl();
            const response = yield this.client.get(urlWithPathParams);
            const data = this.handleResponse(response);
            return new Report(data);
        });
    }
    getReportCsv(reportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const urlWithPathParams = new PathParameters(ReportPaths.getReportCsv, {
                report_id: reportId,
            }).deriveUrl();
            const response = yield this.client.get(urlWithPathParams);
            const data = this.handleResponse(response);
            return new ReportCsv(data);
        });
    }
}
