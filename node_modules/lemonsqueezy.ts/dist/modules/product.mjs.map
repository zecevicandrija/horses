{"version":3,"sources":["../../src/shared/shared.actions.ts","../../src/shared/shared.types.ts","../../src/modules/product/product.action.ts","../../src/modules/product/index.ts"],"sourcesContent":["import { fetch } from \"undici\";\nimport { join } from \"node:path\";\n\nimport { LemonsqueezyDataType } from \"~/shared\";\n\nimport type {\n  BaseLemonsqueezyResponse,\n  LemonsqueezyOptions,\n  PaginatedBaseLemonsqueezyResponse,\n} from \"~/shared\";\n\nexport async function requestLemonSqueeze<\n  TResponse extends\n    | BaseLemonsqueezyResponse<any>\n    | PaginatedBaseLemonsqueezyResponse<any>,\n  TData extends Record<string, any> = Record<string, any>\n>({\n  apiKey,\n  apiVersion = \"v1\",\n  baseUrl = \"https://api.lemonsqueezy.com\",\n  data,\n  headers,\n  include,\n  method = \"GET\",\n  page,\n  params,\n  path,\n}: LemonsqueezyOptions<TData>): Promise<TResponse> {\n  try {\n    const url = new URL(join(apiVersion, path), baseUrl);\n\n    if (include)\n      url.searchParams.append(\n        \"include\",\n        include.map((i) => LemonsqueezyDataType[i]).join(\",\")\n      );\n\n    if (page) url.searchParams.append(\"page\", page.toString());\n\n    if (params && method === \"GET\")\n      Object.entries(params).forEach(([key, value]) =>\n        url.searchParams.append(key, value)\n      );\n\n    const response = await fetch(url.href, {\n      headers: {\n        Accept: \"application/vnd.api+json\",\n        Authorization: `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/vnd.api+json\",\n        ...headers,\n      },\n      method,\n      ...(data && method !== \"GET\"\n        ? {\n            body: JSON.stringify(data),\n          }\n        : {}),\n    });\n    if (!response.ok) {\n      const errorsJson = (await response.json()) as {\n        errors: Array<{\n          detail: string;\n          status: number;\n          title: string;\n        }>;\n      };\n      throw {\n        status: response.status,\n        message: response.statusText,\n        errors: errorsJson.errors,\n      };\n    }\n\n    const json = (await response.json()) as TResponse;\n    if (json.errors && json.errors.length > 0) throw json;\n\n    return json;\n  } catch (error) {\n    throw error;\n  }\n}\n","import type { RequestInit } from \"undici\";\n\nexport interface SharedModuleOptions {\n  apiKey: string;\n  page?: number;\n  include?: Array<keyof typeof LemonsqueezyDataType>;\n}\n\nexport interface SharedLemonsqueezyOptions {\n  apiVersion?: \"v1\";\n  baseUrl?: string;\n}\n\nexport interface LemonsqueezyOptions<\n  TData extends Record<string, any> = Record<string, any>\n> extends Omit<RequestInit, \"body\">,\n    SharedLemonsqueezyOptions,\n    SharedModuleOptions {\n  data?: TData;\n  params?: Record<string, any>;\n  method?:\n    | \"CONNECT\"\n    | \"DELETE\"\n    | \"GET\"\n    | \"HEAD\"\n    | \"OPTIONS\"\n    | \"PATCH\"\n    | \"POST\"\n    | \"PUT\"\n    | \"TRACE\";\n  path: string;\n}\n\nexport enum LemonsqueezyDataType {\n  checkouts = \"checkouts\",\n  customers = \"customers\",\n  discounts = \"discounts\",\n  files = \"files\",\n  license_key_instances = \"license-key-instances\",\n  license_keys = \"license-keys\",\n  order_items = \"order-items\",\n  orders = \"orders\",\n  products = \"products\",\n  stores = \"stores\",\n  subscriptions = \"subscriptions\",\n  subscription_invoices = \"subscription-invoices\",\n  users = \"users\",\n  variants = \"variants\",\n}\n\nexport interface BaseLemonsqueezyResponse<\n  TData,\n  TLinks = {\n    self: string;\n  }\n> {\n  data: TData;\n  errors?: Array<{\n    detail: string;\n    status: string | number;\n    title: string;\n  }>;\n  jsonapi: {\n    version: string;\n  };\n  links: TLinks;\n}\n\nexport interface PaginatedBaseLemonsqueezyResponse<\n  TData,\n  TLinks = {\n    first: string;\n    last: string;\n  }\n> extends BaseLemonsqueezyResponse<TData, TLinks> {\n  meta: {\n    page: {\n      currentPage: number;\n      from: number;\n      lastPage: number;\n      perPage: number;\n      to: number;\n      total: number;\n    };\n  };\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllProductsOptions,\n  ListAllProductsResult,\n  RetrieveProductOptions,\n  RetrieveProductResult,\n} from \"./product.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all products\n *\n * @description Returns a paginated list of products\n *\n * @docs https://docs.lemonsqueezy.com/api/products#list-all-products\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of product objects ordered by `name`\n */\nexport async function listAllProducts(\n  options: ListAllProductsOptions & SharedModuleOptions\n): Promise<ListAllProductsResult> {\n  const { storeId, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllProductsResult>({\n    params: {\n      ...(storeId ? { store_id: storeId } : {}),\n    },\n    path: \"/products\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve product\n *\n * @description Retrieves the product with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/products#retrieve-a-product\n *\n * @param {String} options.id - The ID of the product to retrieve\n *\n * @returns A product object\n */\nexport async function retrieveProduct(\n  options: RetrieveProductOptions & SharedModuleOptions\n): Promise<RetrieveProductResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveProductResult>({\n    path: `/products/${id}`,\n    ...rest,\n  });\n}\n","import { listAllProducts, retrieveProduct } from \"./product.action\";\n\nexport { listAllProducts, retrieveProduct };\n\nexport type {\n  LemonsqueezyProduct,\n  ListAllProductsOptions,\n  ListAllProductsResult,\n  RetrieveProductOptions,\n  RetrieveProductResult,\n} from \"./product.types\";\n\nexport default {\n  listAllProducts,\n  retrieveProduct,\n} as const;\n"],"mappings":"AAAA,OAAS,SAAAA,MAAa,SACtB,OAAS,QAAAC,MAAY,YAUrB,eAAsBC,EAKpB,CACA,OAAAC,EACA,WAAAC,EAAa,KACb,QAAAC,EAAU,+BACV,KAAAC,EACA,QAAAC,EACA,QAAAC,EACA,OAAAC,EAAS,MACT,KAAAC,EACA,OAAAC,EACA,KAAAC,CACF,EAAmD,CACjD,GAAI,CACF,IAAMC,EAAM,IAAI,IAAIC,EAAKV,EAAYQ,CAAI,EAAGP,CAAO,EAE/CG,GACFK,EAAI,aAAa,OACf,UACAL,EAAQ,IAAK,GAAMO,EAAqB,CAAC,CAAC,EAAE,KAAK,GAAG,CACtD,EAEEL,GAAMG,EAAI,aAAa,OAAO,OAAQH,EAAK,SAAS,CAAC,EAErDC,GAAUF,IAAW,OACvB,OAAO,QAAQE,CAAM,EAAE,QAAQ,CAAC,CAACK,EAAKC,CAAK,IACzCJ,EAAI,aAAa,OAAOG,EAAKC,CAAK,CACpC,EAEF,IAAMC,EAAW,MAAMC,EAAMN,EAAI,KAAM,CACrC,QAAS,CACP,OAAQ,2BACR,cAAe,UAAUV,CAAM,GAC/B,eAAgB,2BAChB,GAAGI,CACL,EACA,OAAAE,EACA,GAAIH,GAAQG,IAAW,MACnB,CACE,KAAM,KAAK,UAAUH,CAAI,CAC3B,EACA,CAAC,CACP,CAAC,EACD,GAAI,CAACY,EAAS,GAAI,CAChB,IAAME,EAAc,MAAMF,EAAS,KAAK,EAOxC,KAAM,CACJ,OAAQA,EAAS,OACjB,QAASA,EAAS,WAClB,OAAQE,EAAW,MACrB,CACF,CAEA,IAAMC,EAAQ,MAAMH,EAAS,KAAK,EAClC,GAAIG,EAAK,QAAUA,EAAK,OAAO,OAAS,EAAG,MAAMA,EAEjD,OAAOA,CACT,OAASC,EAAO,CACd,MAAMA,CACR,CACF,CC/CO,IAAKC,OACVA,EAAA,UAAY,YACZA,EAAA,UAAY,YACZA,EAAA,UAAY,YACZA,EAAA,MAAQ,QACRA,EAAA,sBAAwB,wBACxBA,EAAA,aAAe,eACfA,EAAA,YAAc,cACdA,EAAA,OAAS,SACTA,EAAA,SAAW,WACXA,EAAA,OAAS,SACTA,EAAA,cAAgB,gBAChBA,EAAA,sBAAwB,wBACxBA,EAAA,MAAQ,QACRA,EAAA,SAAW,WAdDA,OAAA,ICZZ,eAAsBC,EACpBC,EACgC,CAChC,GAAM,CAAE,QAAAC,EAAS,GAAGC,CAAK,EAAIF,EAE7B,OAAOG,EAA2C,CAChD,OAAQ,CACN,GAAIF,EAAU,CAAE,SAAUA,CAAQ,EAAI,CAAC,CACzC,EACA,KAAM,YACN,GAAGC,CACL,CAAC,CACH,CAaA,eAAsBE,EACpBJ,EACgC,CAChC,GAAM,CAAE,GAAAK,EAAI,GAAGH,CAAK,EAAIF,EAExB,OAAOG,EAA2C,CAChD,KAAM,aAAaE,CAAE,GACrB,GAAGH,CACL,CAAC,CACH,CC3CA,IAAOI,EAAQ,CACb,gBAAAC,EACA,gBAAAC,CACF","names":["fetch","join","requestLemonSqueeze","apiKey","apiVersion","baseUrl","data","headers","include","method","page","params","path","url","join","LemonsqueezyDataType","key","value","response","fetch","errorsJson","json","error","LemonsqueezyDataType","listAllProducts","options","storeId","rest","requestLemonSqueeze","retrieveProduct","id","product_default","listAllProducts","retrieveProduct"]}