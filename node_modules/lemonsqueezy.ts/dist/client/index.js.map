{"version":3,"sources":["../../src/client/index.ts","../../src/shared/shared.actions.ts","../../src/shared/shared.types.ts","../../src/modules/checkout/checkout.action.ts","../../src/modules/customer/customer.action.ts","../../src/modules/discount/discount.action.ts","../../src/modules/file/file.action.ts","../../src/modules/licenseKey/licenseKey.action.ts","../../src/modules/licenseKeyInstance/licenseKeyInstance.action.ts","../../src/modules/order/order.action.ts","../../src/modules/orderItem/orderItem.action.ts","../../src/modules/product/product.action.ts","../../src/modules/store/store.action.ts","../../src/modules/subscription/subscription.action.ts","../../src/modules/subscriptionInvoice/subscriptionInvoice.action.ts","../../src/modules/user/user.action.ts","../../src/modules/variant/variant.action.ts","../../src/client/client.class.ts"],"sourcesContent":["export { LemonsqueezyClient } from \"./client.class\";\n","import { fetch } from \"undici\";\nimport { join } from \"node:path\";\n\nimport { LemonsqueezyDataType } from \"~/shared\";\n\nimport type {\n  BaseLemonsqueezyResponse,\n  LemonsqueezyOptions,\n  PaginatedBaseLemonsqueezyResponse,\n} from \"~/shared\";\n\nexport async function requestLemonSqueeze<\n  TResponse extends\n    | BaseLemonsqueezyResponse<any>\n    | PaginatedBaseLemonsqueezyResponse<any>,\n  TData extends Record<string, any> = Record<string, any>\n>({\n  apiKey,\n  apiVersion = \"v1\",\n  baseUrl = \"https://api.lemonsqueezy.com\",\n  data,\n  headers,\n  include,\n  method = \"GET\",\n  page,\n  params,\n  path,\n}: LemonsqueezyOptions<TData>): Promise<TResponse> {\n  try {\n    const url = new URL(join(apiVersion, path), baseUrl);\n\n    if (include)\n      url.searchParams.append(\n        \"include\",\n        include.map((i) => LemonsqueezyDataType[i]).join(\",\")\n      );\n\n    if (page) url.searchParams.append(\"page\", page.toString());\n\n    if (params && method === \"GET\")\n      Object.entries(params).forEach(([key, value]) =>\n        url.searchParams.append(key, value)\n      );\n\n    const response = await fetch(url.href, {\n      headers: {\n        Accept: \"application/vnd.api+json\",\n        Authorization: `Bearer ${apiKey}`,\n        \"Content-Type\": \"application/vnd.api+json\",\n        ...headers,\n      },\n      method,\n      ...(data && method !== \"GET\"\n        ? {\n            body: JSON.stringify(data),\n          }\n        : {}),\n    });\n    if (!response.ok) {\n      const errorsJson = (await response.json()) as {\n        errors: Array<{\n          detail: string;\n          status: number;\n          title: string;\n        }>;\n      };\n      throw {\n        status: response.status,\n        message: response.statusText,\n        errors: errorsJson.errors,\n      };\n    }\n\n    const json = (await response.json()) as TResponse;\n    if (json.errors && json.errors.length > 0) throw json;\n\n    return json;\n  } catch (error) {\n    throw error;\n  }\n}\n","import type { RequestInit } from \"undici\";\n\nexport interface SharedModuleOptions {\n  apiKey: string;\n  page?: number;\n  include?: Array<keyof typeof LemonsqueezyDataType>;\n}\n\nexport interface SharedLemonsqueezyOptions {\n  apiVersion?: \"v1\";\n  baseUrl?: string;\n}\n\nexport interface LemonsqueezyOptions<\n  TData extends Record<string, any> = Record<string, any>\n> extends Omit<RequestInit, \"body\">,\n    SharedLemonsqueezyOptions,\n    SharedModuleOptions {\n  data?: TData;\n  params?: Record<string, any>;\n  method?:\n    | \"CONNECT\"\n    | \"DELETE\"\n    | \"GET\"\n    | \"HEAD\"\n    | \"OPTIONS\"\n    | \"PATCH\"\n    | \"POST\"\n    | \"PUT\"\n    | \"TRACE\";\n  path: string;\n}\n\nexport enum LemonsqueezyDataType {\n  checkouts = \"checkouts\",\n  customers = \"customers\",\n  discounts = \"discounts\",\n  files = \"files\",\n  license_key_instances = \"license-key-instances\",\n  license_keys = \"license-keys\",\n  order_items = \"order-items\",\n  orders = \"orders\",\n  products = \"products\",\n  stores = \"stores\",\n  subscriptions = \"subscriptions\",\n  subscription_invoices = \"subscription-invoices\",\n  users = \"users\",\n  variants = \"variants\",\n}\n\nexport interface BaseLemonsqueezyResponse<\n  TData,\n  TLinks = {\n    self: string;\n  }\n> {\n  data: TData;\n  errors?: Array<{\n    detail: string;\n    status: string | number;\n    title: string;\n  }>;\n  jsonapi: {\n    version: string;\n  };\n  links: TLinks;\n}\n\nexport interface PaginatedBaseLemonsqueezyResponse<\n  TData,\n  TLinks = {\n    first: string;\n    last: string;\n  }\n> extends BaseLemonsqueezyResponse<TData, TLinks> {\n  meta: {\n    page: {\n      currentPage: number;\n      from: number;\n      lastPage: number;\n      perPage: number;\n      to: number;\n      total: number;\n    };\n  };\n}\n","import { LemonsqueezyDataType, requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  CreateCheckoutBody,\n  CreateCheckoutOptions,\n  CreateCheckoutResult,\n  ListAllCheckoutsOptions,\n  ListAllCheckoutsResult,\n  RetrieveCheckoutOptions,\n  RetrieveCheckoutResult,\n} from \"./checkout.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * Create checkout\n *\n * @description Create a custom checkout. Use this endpoint to create a unique checkout URL for a specific variant\n *\n * @docs https://docs.lemonsqueezy.com/api/checkouts#create-a-checkout\n *\n * @returns A checkout object\n */\nexport async function createCheckout(\n  options: CreateCheckoutOptions & Pick<SharedModuleOptions, \"apiKey\">\n): Promise<CreateCheckoutResult> {\n  const {\n    checkout_data,\n    checkout_options,\n    custom_price,\n    expires_at,\n    product_options,\n    store,\n    variant,\n    ...rest\n  } = options;\n\n  return requestLemonSqueeze<CreateCheckoutResult, CreateCheckoutBody>({\n    data: {\n      data: {\n        attributes: {\n          checkout_data,\n          checkout_options,\n          custom_price,\n          expires_at,\n          product_options,\n        },\n        relationships: {\n          store: {\n            data: {\n              id: store,\n              type: LemonsqueezyDataType.stores,\n            },\n          },\n          variant: {\n            data: {\n              id: variant,\n              type: LemonsqueezyDataType.variants,\n            },\n          },\n        },\n        type: LemonsqueezyDataType.checkouts,\n      },\n    },\n    path: \"/checkouts\",\n    method: \"POST\",\n    ...rest,\n  });\n}\n\n/**\n * List all checkouts\n *\n * @description Returns a paginated list of checkouts\n *\n * @docs https://docs.lemonsqueezy.com/api/checkouts#list-all-checkouts\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of checkout objects ordered by `created_at` (descending)\n */\nexport async function listAllCheckouts(\n  options: ListAllCheckoutsOptions & SharedModuleOptions\n): Promise<ListAllCheckoutsResult> {\n  const { storeId, variantId, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllCheckoutsResult>({\n    params: {\n      ...(storeId ? { store_id: storeId } : {}),\n      ...(variantId ? { variant_id: variantId } : {}),\n    },\n    path: \"/checkouts\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve checkout\n *\n * @description Retrieves the checkout with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/checkouts#retrieve-a-checkout\n *\n * @param {String} options.id - The ID of the checkout to retrieve\n *\n * @returns A checkout object\n */\nexport async function retrieveCheckout(\n  options: RetrieveCheckoutOptions & SharedModuleOptions\n): Promise<RetrieveCheckoutResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveCheckoutResult>({\n    path: `/checkouts/${id}`,\n    ...rest,\n  });\n}\n","import type {\n  ListAllCustomersOptions,\n  ListAllCustomersResult,\n  RetrieveCustomerOptions,\n  RetrieveCustomerResult,\n} from \"./customer.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\nimport { requestLemonSqueeze } from \"~/shared\";\n\n/**\n * List all customers\n *\n * @description Returns a paginated list of customers\n *\n * @docs https://docs.lemonsqueezy.com/api/customers#list-all-customers\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of customer objects ordered by `created_at` (descending)\n */\nexport async function listAllCustomers(\n  options: ListAllCustomersOptions & SharedModuleOptions\n): Promise<ListAllCustomersResult> {\n  const { storeId, email, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllCustomersResult>({\n    params: {\n      ...(storeId ? { store_id: storeId } : {}),\n      ...(email ? { email: email } : {}),\n    },\n    path: \"/customers\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve customer\n *\n * @description Retrieves the customer with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/customers#retrieve-a-customer\n *\n * @param {String} options.id - The ID of the customer to retrieve\n *\n * @returns A customer object\n */\nexport async function retrieveCustomer(\n  options: RetrieveCustomerOptions & SharedModuleOptions\n): Promise<RetrieveCustomerResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveCustomerResult>({\n    path: `/customers/${id}`,\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllDiscountsOptions,\n  ListAllDiscountsResult,\n  RetrieveDiscountOptions,\n  RetrieveDiscountResult,\n} from \"~/types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all discounts\n *\n * @description Returns a paginated list of discounts\n *\n * @docs https://docs.lemonsqueezy.com/api/discounts#list-all-discounts\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of discount objects ordered by `created_at`\n */\nexport async function listAllDiscounts(\n  options: ListAllDiscountsOptions & SharedModuleOptions\n): Promise<ListAllDiscountsResult> {\n  const { storeId, ...rest } = options;\n\n  return await requestLemonSqueeze<ListAllDiscountsResult>({\n    params: {\n      ...(storeId ? { store_id: storeId } : {}),\n    },\n    path: \"/discounts\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve discount\n *\n * @description Retrieves the discount with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/discounts#retrieve-a-discount\n *\n * @param {String} options.id - The ID of the discount to retrieve\n *\n * @returns A discount object\n */\nexport async function retrieveDiscount(\n  options: RetrieveDiscountOptions & SharedModuleOptions\n): Promise<RetrieveDiscountResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveDiscountResult>({\n    path: `/discounts/${id}`,\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllFilesOptions,\n  ListAllFilesResult,\n  RetrieveFileOptions,\n  RetrieveFileResult,\n} from \"./file.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all files\n *\n * @description Returns a paginated list of files\n *\n * @docs https://docs.lemonsqueezy.com/api/files#list-all-files\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of file objects ordered by `sort`\n */\nexport async function listAllFiles(\n  options: ListAllFilesOptions & SharedModuleOptions\n): Promise<ListAllFilesResult> {\n  const { variantId, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllFilesResult>({\n    params: {\n      ...(variantId ? { variant_id: variantId } : {}),\n    },\n    path: \"/files\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve file\n *\n * @description Retrieves the file with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/files#retrieve-a-file\n *\n * @param {String} options.id - The ID of the file to retrieve\n *\n * @returns A file object\n */\nexport async function retrieveFile(\n  options: RetrieveFileOptions & SharedModuleOptions\n): Promise<RetrieveFileResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveFileResult>({\n    path: `/files/${id}`,\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllLicenseKeysOptions,\n  ListAllLicenseKeysResult,\n  RetrieveLicenseKeyOptions,\n  RetrieveLicenseKeyResult,\n} from \"./licenseKey.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all license keys\n *\n * @description Returns a paginated list of license keys\n *\n * @docs https://docs.lemonsqueezy.com/api/license-keys#list-all-license-keys\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of license key objects ordered by `id`\n */\nexport async function listAllLicenseKeys(\n  options: ListAllLicenseKeysOptions & SharedModuleOptions\n): Promise<ListAllLicenseKeysResult> {\n  const { orderId, orderItemId, productId, storeId, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllLicenseKeysResult>({\n    params: {\n      ...(orderId ? { order_id: orderId } : {}),\n      ...(orderItemId ? { order_item_id: orderItemId } : {}),\n      ...(productId ? { product_id: productId } : {}),\n      ...(storeId ? { store_id: storeId } : {}),\n    },\n    path: \"/license-keys\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve license key\n *\n * @description Retrieves the license key with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/license-keys#retrieve-a-license-key\n *\n * @param {String} options.id - The ID of the license key to retrieve\n *\n * @returns A license key object\n */\nexport async function retrieveLicenseKey(\n  options: RetrieveLicenseKeyOptions & SharedModuleOptions\n): Promise<RetrieveLicenseKeyResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveLicenseKeyResult>({\n    path: `/license-keys/${id}`,\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllLicenseKeyInstancesOptions,\n  ListAllLicenseKeyInstancesResult,\n  RetrieveLicenseKeyInstanceOptions,\n  RetrieveLicenseKeyInstanceResult,\n} from \"./licenseKeyInstance.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all license key instances\n *\n * @description Returns a paginated list of license key instances\n *\n * @docs https://docs.lemonsqueezy.com/api/license-key-instances#list-all-license-key-instances\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of license key instance objects ordered by `id`\n */\nexport async function listAllLicenseKeyInstances(\n  options: ListAllLicenseKeyInstancesOptions & SharedModuleOptions\n): Promise<ListAllLicenseKeyInstancesResult> {\n  const { licenseKeyId, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllLicenseKeyInstancesResult>({\n    params: {\n      ...(licenseKeyId ? { license_key_id: licenseKeyId } : {}),\n    },\n    path: \"/license-key-instances\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve license key instance\n *\n * @description Retrieves the license key instance with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/license-key-instances#retrieve-a-license-key-instance\n *\n * @param {String} options.id - The ID of the license key instance to retrieve\n *\n * @returns A license key instance object\n */\nexport async function retrieveLicenseKeyInstance(\n  options: RetrieveLicenseKeyInstanceOptions & SharedModuleOptions\n): Promise<RetrieveLicenseKeyInstanceResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveLicenseKeyInstanceResult>({\n    path: `/license-key-instances/${id}`,\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllOrdersOptions,\n  ListAllOrdersResult,\n  RetrieveOrderOptions,\n  RetrieveOrderResult,\n} from \"./order.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all files\n *\n * @description Returns a paginated list of files\n *\n * @docs https://docs.lemonsqueezy.com/api/files#list-all-files\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of file objects ordered by `sort`\n */\nexport async function listAllOrders(\n  options: ListAllOrdersOptions & SharedModuleOptions\n): Promise<ListAllOrdersResult> {\n  const { storeId, userEmail, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllOrdersResult>({\n    params: {\n      ...(storeId ? { store_id: storeId } : {}),\n      ...(userEmail ? { user_email: userEmail } : {}),\n    },\n    path: \"/orders\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve order\n *\n * @description Retrieves the order with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/orders#retrieve-an-order\n *\n * @param {String} options.id - The ID of the order to retrieve\n *\n * @returns A order object\n */\nexport async function retrieveOrder(\n  options: RetrieveOrderOptions & SharedModuleOptions\n): Promise<RetrieveOrderResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveOrderResult>({\n    path: `/orders/${id}`,\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllOrderItemsOptions,\n  ListAllOrderItemsResult,\n  RetrieveOrderItemOptions,\n  RetrieveOrderItemResult,\n} from \"./orderItem.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all order items\n *\n * @description Returns a paginated list of order items\n *\n * @docs https://docs.lemonsqueezy.com/api/order-items#list-all-order-items\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of order item objects ordered by `id`\n */\nexport async function listAllOrderItems(\n  options: ListAllOrderItemsOptions & SharedModuleOptions\n): Promise<ListAllOrderItemsResult> {\n  const { orderId, productId, variantId, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllOrderItemsResult>({\n    params: {\n      ...(orderId ? { order_id: orderId } : {}),\n      ...(productId ? { product_id: productId } : {}),\n      ...(variantId ? { variant_id: variantId } : {}),\n    },\n    path: \"/order-items\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve order item\n *\n * @description Retrieves the order item with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/order-items#retrieve-an-order-item\n *\n * @param {String} options.id - The ID of the order item to retrieve\n *\n * @returns A order item object\n */\nexport async function retrieveOrderItem(\n  options: RetrieveOrderItemOptions & SharedModuleOptions\n): Promise<RetrieveOrderItemResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveOrderItemResult>({\n    path: `/order-items/${id}`,\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllProductsOptions,\n  ListAllProductsResult,\n  RetrieveProductOptions,\n  RetrieveProductResult,\n} from \"./product.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all products\n *\n * @description Returns a paginated list of products\n *\n * @docs https://docs.lemonsqueezy.com/api/products#list-all-products\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of product objects ordered by `name`\n */\nexport async function listAllProducts(\n  options: ListAllProductsOptions & SharedModuleOptions\n): Promise<ListAllProductsResult> {\n  const { storeId, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllProductsResult>({\n    params: {\n      ...(storeId ? { store_id: storeId } : {}),\n    },\n    path: \"/products\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve product\n *\n * @description Retrieves the product with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/products#retrieve-a-product\n *\n * @param {String} options.id - The ID of the product to retrieve\n *\n * @returns A product object\n */\nexport async function retrieveProduct(\n  options: RetrieveProductOptions & SharedModuleOptions\n): Promise<RetrieveProductResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveProductResult>({\n    path: `/products/${id}`,\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllStoresOptions,\n  ListAllStoresResult,\n  RetrieveStoreOptions,\n  RetrieveStoreResult,\n} from \"./store.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all stores\n *\n * @description Returns a paginated list of stores\n *\n * @docs https://docs.lemonsqueezy.com/api/stores#list-all-stores\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of `store` objects ordered by name\n */\nexport async function listAllStores(\n  options: ListAllStoresOptions & SharedModuleOptions\n): Promise<ListAllStoresResult> {\n  return requestLemonSqueeze<ListAllStoresResult>({\n    path: \"/stores\",\n    ...options,\n  });\n}\n\n/**\n * Retrieve store\n *\n * @description Retrieves the store with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/stores#retrieve-a-store\n *\n * @param {String} options.id - The ID of the store to retrieve\n *\n * @returns A store object\n */\nexport async function retrieveStore(\n  options: RetrieveStoreOptions & SharedModuleOptions\n): Promise<RetrieveStoreResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveStoreResult>({\n    path: `/stores/${id}`,\n    ...rest,\n  });\n}\n","import { LemonsqueezyDataType } from \"~/shared\";\nimport { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllSubscriptionsOptions,\n  ListAllSubscriptionsResult,\n  RetrieveSubscriptionOptions,\n  RetrieveSubscriptionResult,\n  UpdateSubscriptionOptions,\n  UpdateSubscriptionResult,\n} from \"./subscription.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all subscriptions\n *\n * @description Returns a paginated list of subscriptions\n *\n * @docs https://docs.lemonsqueezy.com/api/subscriptions#list-all-subscriptions\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of subscription objects ordered by `created_at` (descending)\n */\nexport async function listAllSubscriptions(\n  options: ListAllSubscriptionsOptions & SharedModuleOptions\n): Promise<ListAllSubscriptionsResult> {\n  const { orderId, orderItemId, productId, storeId, variantId, ...rest } =\n    options;\n\n  return requestLemonSqueeze<ListAllSubscriptionsResult>({\n    params: {\n      ...(orderId ? { order_id: orderId } : {}),\n      ...(orderItemId ? { order_item_id: orderItemId } : {}),\n      ...(productId ? { product_id: productId } : {}),\n      ...(storeId ? { store_id: storeId } : {}),\n      ...(variantId ? { variant_id: variantId } : {}),\n    },\n    path: \"/subscriptions\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve subscription\n *\n * @description Retrieves the subscription with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/subscriptions#retrieve-a-subscription\n *\n * @param {String} options.id - The ID of the subscription to retrieve\n *\n * @returns A subscription object\n */\nexport async function retrieveSubscription(\n  options: RetrieveSubscriptionOptions & SharedModuleOptions\n): Promise<RetrieveSubscriptionResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveSubscriptionResult>({\n    path: `/subscriptions/${id}`,\n    ...rest,\n  });\n}\n\n/**\n * Update subscription\n *\n * @description Update an existing subscription to specific parameters. With this endpoint, you can:\n *\n *  - Upgrade & Downgrade a subscripion to a different Product or Variant\n *  - Change payment pause collection behaviour\n *  - Update the billing date for when payments are collected\n *\n * When changing the plan of a subscription, we prorate the charge for the next billing cycle.\n * For example, if a customer buys your product on April 1st for $50, they'll be charged $50 immediately.\n * If on April 15th they upgrade to your $100 product, on May 1st they'll be charged $125.\n * This is made up of $100 for renewing, $50 of used time on your upgraded $100 plan from April 15th - May 1st, and then a credited -$25 for unused time on your $50 plan.\n *\n * If downgrading a subscription, we'll issue a credit which is then applied on the next invoice.\n *\n * Changing a subscription plan may change the billing date or charge immediately if:\n *\n *  - The variant has a different billing cycle (from monthly to yearly, etc)\n *  - The subscription is no longer free, or is now free\n *  - A trial starts or ends\n *\n * @docs https://docs.lemonsqueezy.com/api/subscriptions#update-a-subscription\n *\n * @param {String} options.id - The ID of the subscription to retrieve\n *\n * @returns A subscription object\n */\nexport async function updateSubscription(\n  options: UpdateSubscriptionOptions & SharedModuleOptions\n): Promise<UpdateSubscriptionResult> {\n  const { billingAnchor, cancelled, id, pause, productId, variantId, invoiceImmediately, disableProrations,  ...rest } =\n    options;\n\n  return requestLemonSqueeze<UpdateSubscriptionResult>({\n    data: {\n      data: {\n        attributes: {\n          billing_anchor: billingAnchor,\n          cancelled,\n          pause,\n          product_id: productId,\n          variant_id: variantId,\n          invoice_immediately: invoiceImmediately,\n          disable_prorations: disableProrations\n        },\n        id,\n        type: LemonsqueezyDataType.subscriptions,\n      },\n    },\n    path: `/subscriptions/${id}`,\n    method: \"PATCH\",\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllSubscriptionInvoicesOptions,\n  ListAllSubscriptionInvoicesResult,\n  RetrieveSubscriptionInvoiceOptions,\n  RetrieveSubscriptionInvoiceResult,\n} from \"./subscriptionInvoice.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all subscription invoices\n *\n * @description Returns a paginated list of subscriptions\n *\n * @docs https://docs.lemonsqueezy.com/api/subscription-invoices#list-all-subscription-invoices\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of subscription invoice objects.\n */\nexport async function listAllSubscriptionInvoices(\n  options: ListAllSubscriptionInvoicesOptions & SharedModuleOptions\n): Promise<ListAllSubscriptionInvoicesResult> {\n  const { refunded, status, storeId, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllSubscriptionInvoicesResult>({\n    params: {\n      ...(refunded ? { refunded } : {}),\n      ...(status ? { status } : {}),\n      ...(storeId ? { store_id: storeId } : {}),\n    },\n    path: \"/subscription-invoices\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve subscription invoice\n *\n * @description Retrieves a subscription invoice with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/subscription-invoices#retrieve-a-subscription-invoice\n *\n * @param {String} options.id - The ID of the subscription invoice to retrieve\n *\n * @returns A subscription invoice object\n */\nexport async function retrieveSubscriptionInvoice(\n  options: RetrieveSubscriptionInvoiceOptions & SharedModuleOptions\n): Promise<RetrieveSubscriptionInvoiceResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveSubscriptionInvoiceResult>({\n    path: `/subscription-invoices/${id}`,\n    ...rest,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type { GetUserOptions, GetUserResult } from \"./user.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * Get User\n *\n * @description Retrieves the currently authenticated user\n *\n * @docs https://docs.lemonsqueezy.com/api/users#retrieve-the-authenticated-user\n *\n * @param {Object} [options]\n *\n * @returns A user object\n */\nexport async function getUser(\n  options: GetUserOptions & SharedModuleOptions\n): Promise<GetUserResult> {\n  return requestLemonSqueeze<GetUserResult>({\n    path: \"/users/me\",\n    ...options,\n  });\n}\n","import { requestLemonSqueeze } from \"~/shared\";\n\nimport type {\n  ListAllVariantsOptions,\n  ListAllVariantsResult,\n  RetrieveVariantOptions,\n  RetrieveVariantResult,\n} from \"./variant.types\";\nimport type { SharedModuleOptions } from \"~/shared\";\n\n/**\n * List all variants\n *\n * @description Returns a paginated list of variants\n *\n * @docs https://docs.lemonsqueezy.com/api/variants#list-all-variants\n *\n * @param {Object} [options]\n *\n * @returns Returns a paginated list of variant objects ordered by sort\n */\nexport async function listAllVariants(\n  options: ListAllVariantsOptions & SharedModuleOptions\n): Promise<ListAllVariantsResult> {\n  const { productId, ...rest } = options;\n\n  return requestLemonSqueeze<ListAllVariantsResult>({\n    params: {\n      ...(productId ? { product_id: productId } : {}),\n    },\n    path: \"/variants\",\n    ...rest,\n  });\n}\n\n/**\n * Retrieve variant\n *\n * @description Retrieves the variant with the given ID\n *\n * @docs https://docs.lemonsqueezy.com/api/variants#retrieve-a-variant\n *\n * @param {String} options.id - The ID of the variant to retrieve\n *\n * @returns A variant object\n */\nexport async function retrieveVariant(\n  options: RetrieveVariantOptions & SharedModuleOptions\n): Promise<RetrieveVariantResult> {\n  const { id, ...rest } = options;\n\n  return requestLemonSqueeze<RetrieveVariantResult>({\n    path: `/variants/${id}`,\n    ...rest,\n  });\n}\n","import {\n  createCheckout,\n  getUser,\n  listAllCheckouts,\n  listAllCustomers,\n  listAllDiscounts,\n  listAllFiles,\n  listAllLicenseKeyInstances,\n  listAllLicenseKeys,\n  listAllOrderItems,\n  listAllOrders,\n  listAllProducts,\n  listAllStores,\n  listAllSubscriptionInvoices,\n  listAllSubscriptions,\n  listAllVariants,\n  retrieveCheckout,\n  retrieveCustomer,\n  retrieveDiscount,\n  retrieveFile,\n  retrieveLicenseKey,\n  retrieveLicenseKeyInstance,\n  retrieveOrder,\n  retrieveOrderItem,\n  retrieveProduct,\n  retrieveStore,\n  retrieveSubscription,\n  retrieveSubscriptionInvoice,\n  retrieveVariant,\n  updateSubscription,\n} from \"~/modules\";\n\nimport type {\n  CreateCheckoutOptions,\n  GetUserOptions,\n  ListAllCheckoutsOptions,\n  ListAllCustomersOptions,\n  ListAllDiscountsOptions,\n  ListAllFilesOptions,\n  ListAllLicenseKeyInstancesOptions,\n  ListAllLicenseKeysOptions,\n  ListAllOrderItemsOptions,\n  ListAllOrdersOptions,\n  ListAllProductsOptions,\n  ListAllStoresOptions,\n  ListAllSubscriptionInvoicesOptions,\n  ListAllSubscriptionsOptions,\n  ListAllVariantsOptions,\n  RetrieveCheckoutOptions,\n  RetrieveCustomerOptions,\n  RetrieveDiscountOptions,\n  RetrieveFileOptions,\n  RetrieveLicenseKeyInstanceOptions,\n  RetrieveLicenseKeyOptions,\n  RetrieveOrderItemOptions,\n  RetrieveOrderOptions,\n  RetrieveProductOptions,\n  RetrieveStoreOptions,\n  RetrieveSubscriptionInvoiceOptions,\n  RetrieveSubscriptionOptions,\n  RetrieveVariantOptions,\n  UpdateSubscriptionOptions,\n} from \"~/modules\";\n\nexport class LemonsqueezyClient {\n  private _apiKey: string;\n\n  constructor(apiKey: string) {\n    this._apiKey = apiKey;\n  }\n\n  /**\n   * Get User\n   *\n   * @description Retrieves the currently authenticated user\n   *\n   * @docs https://docs.lemonsqueezy.com/api/users#retrieve-the-authenticated-user\n   *\n   * @param {Object} [options]\n   *\n   * @returns A user object\n   */\n  public async getUser(options: GetUserOptions = {}) {\n    return getUser({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve store\n   *\n   * @description Retrieves the store with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/stores#retrieve-a-store\n   *\n   * @param {String} options.id - The ID of the store to retrieve\n   *\n   * @returns A store object\n   */\n  public async retrieveStore(options: RetrieveStoreOptions) {\n    return retrieveStore({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all stores\n   *\n   * @description Returns a paginated list of stores\n   *\n   * @docs https://docs.lemonsqueezy.com/api/stores#list-all-stores\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of `store` objects ordered by name\n   */\n  public async listAllStores(options: ListAllStoresOptions = {}) {\n    return listAllStores({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve product\n   *\n   * @description Retrieves the product with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/products#retrieve-a-product\n   *\n   * @param {String} options.id - The ID of the product to retrieve\n   *\n   * @returns A product object\n   */\n  public async retrieveProduct(options: RetrieveProductOptions) {\n    return retrieveProduct({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all products\n   *\n   * @description Returns a paginated list of products\n   *\n   * @docs https://docs.lemonsqueezy.com/api/products#list-all-products\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of product objects ordered by `name`\n   */\n  public async listAllProducts(options: ListAllProductsOptions = {}) {\n    return listAllProducts({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve variant\n   *\n   * @description Retrieves the variant with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/variants#retrieve-a-variant\n   *\n   * @param {String} options.id - The ID of the variant to retrieve\n   *\n   * @returns A variant object\n   */\n  public async retrieveVariant(options: RetrieveVariantOptions) {\n    return retrieveVariant({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all variants\n   *\n   * @description Returns a paginated list of variants\n   *\n   * @docs https://docs.lemonsqueezy.com/api/variants#list-all-variants\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of variant objects ordered by sort\n   */\n  public async listAllVariants(options: ListAllVariantsOptions = {}) {\n    return listAllVariants({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve file\n   *\n   * @description Retrieves the file with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/files#retrieve-a-file\n   *\n   * @param {String} options.id - The ID of the file to retrieve\n   *\n   * @returns A file object\n   */\n  public async retrieveFile(options: RetrieveFileOptions) {\n    return retrieveFile({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all files\n   *\n   * @description Returns a paginated list of files\n   *\n   * @docs https://docs.lemonsqueezy.com/api/files#list-all-files\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of file objects ordered by `sort`\n   */\n  public async listAllFiles(options: ListAllFilesOptions = {}) {\n    return listAllFiles({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve order\n   *\n   * @description Retrieves the order with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/orders#retrieve-an-order\n   *\n   * @param {String} options.id - The ID of the order to retrieve\n   *\n   * @returns A order object\n   */\n  public async retrieveOrder(options: RetrieveOrderOptions) {\n    return retrieveOrder({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all orders\n   *\n   * @description Returns a paginated list of orders\n   *\n   * @docs https://docs.lemonsqueezy.com/api/orders#list-all-orders\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of file objects ordered by `sort`\n   */\n  public async listAllOrders(options: ListAllOrdersOptions = {}) {\n    return listAllOrders({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve order item\n   *\n   * @description Retrieves the order item with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/order-items#retrieve-an-order-item\n   *\n   * @param {String} options.id - The ID of the order item to retrieve\n   *\n   * @returns A order item object\n   */\n  public async retrieveOrderItem(options: RetrieveOrderItemOptions) {\n    return retrieveOrderItem({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all order items\n   *\n   * @description Returns a paginated list of order items\n   *\n   * @docs https://docs.lemonsqueezy.com/api/order-items#list-all-order-items\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of order item objects ordered by `id`\n   */\n  public async listAllOrderItems(options: ListAllOrderItemsOptions = {}) {\n    return listAllOrderItems({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve subscription\n   *\n   * @description Retrieves the subscription with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/subscriptions#retrieve-a-subscription\n   *\n   * @param {String} options.id - The ID of the subscription to retrieve\n   *\n   * @returns A subscription object\n   */\n  public async retrieveSubscription(options: RetrieveSubscriptionOptions) {\n    return retrieveSubscription({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all subscriptions\n   *\n   * @description Returns a paginated list of subscriptions\n   *\n   * @docs https://docs.lemonsqueezy.com/api/subscriptions#list-all-subscriptions\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of subscription objects ordered by `created_at` (descending)\n   */\n  public async listAllSubscriptions(options: ListAllSubscriptionsOptions = {}) {\n    return listAllSubscriptions({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Update subscription\n   *\n   * @description Update an existing subscription to specific parameters. With this endpoint, you can:\n   *\n   *  - Upgrade & Downgrade a subscripion to a different Product or Variant\n   *  - Change payment pause collection behaviour\n   *  - Update the billing date for when payments are collected\n   *\n   * When changing the plan of a subscription, we prorate the charge for the next billing cycle.\n   * For example, if a customer buys your product on April 1st for $50, they'll be charged $50 immediately.\n   * If on April 15th they upgrade to your $100 product, on May 1st they'll be charged $125.\n   * This is made up of $100 for renewing, $50 of used time on your upgraded $100 plan from April 15th - May 1st, and then a credited -$25 for unused time on your $50 plan.\n   *\n   * If downgrading a subscription, we'll issue a credit which is then applied on the next invoice.\n   *\n   * Changing a subscription plan may change the billing date or charge immediately if:\n   *\n   *  - The variant has a different billing cycle (from monthly to yearly, etc)\n   *  - The subscription is no longer free, or is now free\n   *  - A trial starts or ends\n   *\n   * @docs https://docs.lemonsqueezy.com/api/subscriptions#update-a-subscription\n   *\n   * @param {String} options.id - The ID of the subscription to retrieve\n   *\n   * @returns A subscription object\n   */\n  public async updateSubscription(options: UpdateSubscriptionOptions) {\n    return updateSubscription({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve discount\n   *\n   * @description Retrieves the discount with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/discounts#retrieve-a-discount\n   *\n   * @param {String} options.id - The ID of the discount to retrieve\n   *\n   * @returns A discount object\n   */\n  public async retrieveDiscount(options: RetrieveDiscountOptions) {\n    return retrieveDiscount({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all discounts\n   *\n   * @description Returns a paginated list of discounts\n   *\n   * @docs https://docs.lemonsqueezy.com/api/discounts#list-all-discounts\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of discount objects ordered by `created_at`\n   */\n  public async listAllDiscounts(options: ListAllDiscountsOptions = {}) {\n    return listAllDiscounts({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve license key\n   *\n   * @description Retrieves the license key with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/license-keys#retrieve-a-license-key\n   *\n   * @param {String} options.id - The ID of the license key to retrieve\n   *\n   * @returns A license key object\n   */\n  public async retrieveLicenseKey(options: RetrieveLicenseKeyOptions) {\n    return retrieveLicenseKey({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all license keys\n   *\n   * @description Returns a paginated list of license keys\n   *\n   * @docs https://docs.lemonsqueezy.com/api/license-keys#list-all-license-keys\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of license key objects ordered by `id`\n   */\n  public async listAllLicenseKeys(options: ListAllLicenseKeysOptions = {}) {\n    return listAllLicenseKeys({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve license key instance\n   *\n   * @description Retrieves the license key instance with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/license-key-instances#retrieve-a-license-key-instance\n   *\n   * @param {String} options.id - The ID of the license key instance to retrieve\n   *\n   * @returns A license key instance object\n   */\n  public async retrieveLicenseKeyInstance(\n    options: RetrieveLicenseKeyInstanceOptions\n  ) {\n    return retrieveLicenseKeyInstance({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all license key instances\n   *\n   * @description Returns a paginated list of license key instances\n   *\n   * @docs https://docs.lemonsqueezy.com/api/license-key-instances#list-all-license-key-instances\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of license key instance objects ordered by `id`\n   */\n  public async listAllLicenseKeyInstances(\n    options: ListAllLicenseKeyInstancesOptions = {}\n  ) {\n    return listAllLicenseKeyInstances({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve checkout\n   *\n   * @description Retrieves the checkout with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/checkouts#retrieve-a-checkout\n   *\n   * @param {String} options.id - The ID of the checkout to retrieve\n   *\n   * @returns A checkout object\n   */\n  public async retrieveCheckout(options: RetrieveCheckoutOptions) {\n    return retrieveCheckout({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all checkouts\n   *\n   * @description Returns a paginated list of checkouts\n   *\n   * @docs https://docs.lemonsqueezy.com/api/checkouts#list-all-checkouts\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of checkout objects ordered by `created_at` (descending)\n   */\n  public async listAllCheckouts(options: ListAllCheckoutsOptions = {}) {\n    return listAllCheckouts({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Create checkout\n   *\n   * @description Create a custom checkout. Use this endpoint to create a unique checkout URL for a specific variant\n   *\n   * @docs https://docs.lemonsqueezy.com/api/checkouts#create-a-checkout\n   *\n   * @returns A checkout object\n   */\n  public async createCheckout(options: CreateCheckoutOptions) {\n    return createCheckout({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve subscription invoice\n   *\n   * @description Retrieves a subscription invoice with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/subscription-invoices#retrieve-a-subscription-invoice\n   *\n   * @param {String} options.id - The ID of the subscription to retrieve\n   *\n   * @returns A subscription invoice object\n   */\n  public async retrieveSubscriptionInvoice(\n    options: RetrieveSubscriptionInvoiceOptions\n  ) {\n    return retrieveSubscriptionInvoice({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all subscription invoices\n   *\n   * @description Returns a paginated list of subscriptions\n   *\n   * @docs https://docs.lemonsqueezy.com/api/subscription-invoices#list-all-subscription-invoices\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of subscription invoice objects.\n   */\n  public async listAllSubscriptionInvoices(\n    options: ListAllSubscriptionInvoicesOptions = {}\n  ) {\n    return listAllSubscriptionInvoices({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * Retrieve customer\n   *\n   * @description Retrieves the customer with the given ID\n   *\n   * @docs https://docs.lemonsqueezy.com/api/customers#retrieve-a-customer\n   *\n   * @param {String} options.id - The ID of the customer to retrieve\n   *\n   * @returns A customer object\n   */\n  public async retrieveCustomer(options: RetrieveCustomerOptions) {\n    return retrieveCustomer({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n\n  /**\n   * List all customers\n   *\n   * @description Returns a paginated list of customers\n   *\n   * @docs https://docs.lemonsqueezy.com/api/customers#list-all-customers\n   *\n   * @param {Object} [options]\n   *\n   * @returns Returns a paginated list of customer objects ordered by `created_at` (descending)\n   */\n  public async listAllCustomers(options: ListAllCustomersOptions = {}) {\n    return listAllCustomers({\n      apiKey: this._apiKey,\n      ...options,\n    });\n  }\n}\n"],"mappings":"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","names":["client_exports","__export","LemonsqueezyClient","__toCommonJS","import_undici","import_node_path","requestLemonSqueeze","apiKey","apiVersion","baseUrl","data","headers","include","method","page","params","path","url","i","LemonsqueezyDataType","key","value","response","errorsJson","json","error","LemonsqueezyDataType","createCheckout","options","checkout_data","checkout_options","custom_price","expires_at","product_options","store","variant","rest","requestLemonSqueeze","listAllCheckouts","storeId","variantId","retrieveCheckout","id","listAllCustomers","options","storeId","email","rest","requestLemonSqueeze","retrieveCustomer","id","listAllDiscounts","options","storeId","rest","requestLemonSqueeze","retrieveDiscount","id","listAllFiles","options","variantId","rest","requestLemonSqueeze","retrieveFile","id","listAllLicenseKeys","options","orderId","orderItemId","productId","storeId","rest","requestLemonSqueeze","retrieveLicenseKey","id","listAllLicenseKeyInstances","options","licenseKeyId","rest","requestLemonSqueeze","retrieveLicenseKeyInstance","id","listAllOrders","options","storeId","userEmail","rest","requestLemonSqueeze","retrieveOrder","id","listAllOrderItems","options","orderId","productId","variantId","rest","requestLemonSqueeze","retrieveOrderItem","id","listAllProducts","options","storeId","rest","requestLemonSqueeze","retrieveProduct","id","listAllStores","options","requestLemonSqueeze","retrieveStore","id","rest","listAllSubscriptions","options","orderId","orderItemId","productId","storeId","variantId","rest","requestLemonSqueeze","retrieveSubscription","id","updateSubscription","billingAnchor","cancelled","pause","invoiceImmediately","disableProrations","listAllSubscriptionInvoices","options","refunded","status","storeId","rest","requestLemonSqueeze","retrieveSubscriptionInvoice","id","getUser","options","requestLemonSqueeze","listAllVariants","options","productId","rest","requestLemonSqueeze","retrieveVariant","id","LemonsqueezyClient","apiKey","options","getUser","retrieveStore","listAllStores","retrieveProduct","listAllProducts","retrieveVariant","listAllVariants","retrieveFile","listAllFiles","retrieveOrder","listAllOrders","retrieveOrderItem","listAllOrderItems","retrieveSubscription","listAllSubscriptions","updateSubscription","retrieveDiscount","listAllDiscounts","retrieveLicenseKey","listAllLicenseKeys","retrieveLicenseKeyInstance","listAllLicenseKeyInstances","retrieveCheckout","listAllCheckouts","createCheckout","retrieveSubscriptionInvoice","listAllSubscriptionInvoices","retrieveCustomer","listAllCustomers"]}